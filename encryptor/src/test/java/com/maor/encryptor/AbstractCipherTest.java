package com.maor.encryptor;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import org.junit.Rule;
import org.junit.rules.TemporaryFolder;

import com.maor.cipher.Cipher;
import com.maor.cipher.Key;

import junitx.framework.FileAssert;

public class AbstractCipherTest {
	
	 @Rule
	 public TemporaryFolder folder= new TemporaryFolder();
	 protected Cipher cipher;
	 private byte [] input;
	 private byte [] output;
	 private Key key;

	/**
	 * Create new temporary files with the input and output data.
	 * Finally checks if the output data is equal to the encrypted file generated by the algortihm.
	 * @throws IOException
	 */
	public void testEncrypt() throws IOException
	{
		File testFileIn = folder.newFile();
        FileOutputStream fo = new FileOutputStream(testFileIn);
        File expected = folder.newFile();
        FileOutputStream fo2 = new FileOutputStream(expected);
        cipher.setKey(key);
        fo.write(this.input);
        fo2.write(this.output);
        this.cipher.encrypt(testFileIn.getPath());
        File actual = new File(folder.getRoot() + "/EncryptedFiles/" + testFileIn.getName()+ ".encrypted");
        FileAssert.assertBinaryEquals(expected, actual);
        fo.close();
        fo2.close();
	}
	
	/**
	 * Create new temporary files with the input and output data.
	 * Finally checks if the output data is equal to the decrypted file generated by the algortihm.
	 * @throws IOException
	 */
	public void testDecrypt() throws IOException
	{
	    File testFileIn = folder.newFile();
        FileOutputStream fo = new FileOutputStream(testFileIn);
        File expected = folder.newFile();
        FileOutputStream fo2 = new FileOutputStream(expected);
        String [] split = testFileIn.getName().split("\\.");
        File actual = folder.newFile(split[0]+"_decrypted."+ split[1]);
        fo.write(input);
        fo2.write(output);
        this.cipher.decrypt(testFileIn.getPath() , key);
        FileAssert.assertBinaryEquals(expected, actual);
        fo.close();
        fo2.close();
	}
	
	public void setInput(byte [] input)
	{
		this.input = input;
	}
	
	public void setOutput(byte [] output)
	{
		this.output = output;
	}
	
	public void setCipher(Cipher c)
	{
		this.cipher = c;
	}
	
	
	public void setKey(Key key)
	{
		this.key = key;
	}

}
